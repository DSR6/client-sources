package com.alan.clients.module.impl.exploit.disabler;

import com.alan.clients.event.Listener;
import com.alan.clients.event.annotations.EventLink;
import com.alan.clients.event.impl.motion.PreMotionEvent;
import com.alan.clients.event.impl.other.TeleportEvent;
import com.alan.clients.event.impl.packet.PacketReceiveEvent;
import com.alan.clients.event.impl.packet.PacketSendEvent;
import com.alan.clients.module.impl.exploit.Disabler;
import com.alan.clients.value.Mode;
import com.alan.clients.value.impl.BooleanValue;
import net.minecraft.client.gui.inventory.GuiInventory;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C0DPacketCloseWindow;
import net.minecraft.network.play.client.C0EPacketClickWindow;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.client.C16PacketClientStatus;
import net.minecraft.network.play.server.S07PacketRespawn;
import net.minecraft.network.play.server.S32PacketConfirmTransaction;
import net.minecraft.util.Vec3;
import rip.vantage.commons.util.time.StopWatch;

import java.util.*;

public class WatchdogDisabler extends Mode<Disabler> {

    private boolean disabled;
    private List<Short> actionNumbers;
    private StopWatch transactionStopwatch;
    private Queue<Vec3> positionQueue;
    private Queue<Packet<?>> transactionQueue;
    private Queue<Packet<?>> blinkQueue;
    private StopWatch pingStopwatch;

    public WatchdogDisabler(String name, Disabler parent) {
        super(name, parent);

        this.positionQueue = new ArrayDeque<>();
        this.transactionQueue = new ArrayDeque<>();
        this.pingStopwatch = new StopWatch();
        this.blinkQueue = new ArrayDeque<>();
        this.actionNumbers = new ArrayList<>();
        this.transactionStopwatch = new StopWatch();
    }

    public final BooleanValue morePackets = new BooleanValue("More Packets", this, false);
    public final BooleanValue ban = new BooleanValue("Ping Spoof", this, false);
    public final BooleanValue inventory = new BooleanValue("Inventory", this, false);

    @EventLink
    private final Listener<TeleportEvent> onTeleport = event -> {
    };

    @EventLink
    private final Listener<PreMotionEvent> preMotionEventListener = event -> {
        if (ban.getValue()) {
            if (!this.actionNumbers.isEmpty() && this.transactionStopwatch.finished(1000L)) {
                Collections.shuffle(this.actionNumbers);
                this.actionNumbers.forEach(action -> mc.getNetHandler().getNetworkManager().sendPacket(new C0FPacketConfirmTransaction(0, action, true)));
                this.actionNumbers.clear();
                this.disabled = true;
            }
        }
    };

    @EventLink
    private final Listener<PacketReceiveEvent> packetReceiveEventListener = event -> {
        if (event.getPacket() instanceof S07PacketRespawn) {
            this.positionQueue.clear();
            this.transactionQueue.clear();
            this.pingStopwatch.reset();
            this.blinkQueue.clear();
            this.transactionStopwatch.reset();
            this.actionNumbers.clear();
            this.disabled = false;
        }

        if (ban.getValue()) {
            if (event.getPacket() instanceof S32PacketConfirmTransaction) {
                final S32PacketConfirmTransaction transaction = (S32PacketConfirmTransaction) event.getPacket();

                if (transaction.getActionNumber() < 0) {
                    if (!this.disabled) {
                        this.actionNumbers.add(transaction.getActionNumber());
                        transactionStopwatch.reset();

                        event.setCancelled(true);
                    }
                }
            }
        }
    };

    @EventLink
    private final Listener<PacketSendEvent> packetSendEventListener = event -> {
        if (inventory.getValue()) {
            if (event.getPacket() instanceof C0EPacketClickWindow && ((C0EPacketClickWindow) event.getPacket()).getWindowId() == mc.thePlayer.inventoryContainer.windowId && !(mc.currentScreen instanceof GuiInventory)) {
                event.setCancelled();
                mc.getNetHandler().getNetworkManager().sendUnregisteredPacket(new C16PacketClientStatus(C16PacketClientStatus.EnumState.OPEN_INVENTORY_ACHIEVEMENT));
                mc.getNetHandler().getNetworkManager().sendUnregisteredPacket(event.getPacket());
                mc.getNetHandler().getNetworkManager().sendUnregisteredPacket(new C0DPacketCloseWindow(mc.thePlayer.inventoryContainer.windowId));
            }
        }
    };
}